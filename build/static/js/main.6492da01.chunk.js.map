{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","console","log","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","setCaption","image","setImage","progress","setProgress","max","files","Button","ref","name","put","on","progess","Math","round","bytesTransferred","totalBytes","error","alert","message","child","getDownloadURL","then","url","rand","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","posts","setPosts","openSignIn","setOpenSignIn","open","setOpen","password","setPassword","email","setEmail","setUsername","setUser","React","modalStyle","onAuthStateChanged","authUser","updateProfile","snaphot","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6492da01.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyAYUoTWRUlc0ohZc6clNFPlHAVV5wurqMo\",\n  authDomain: \"instagram-clone-806f8.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone-806f8.firebaseio.com\",\n  projectId: \"instagram-clone-806f8\",\n  storageBucket: \"instagram-clone-806f8.appspot.com\",\n  messagingSenderId: \"869152460090\",\n  appId: \"1:869152460090:web:d7fde6b118871330bf9403\",\n  measurementId: \"G-39GEQ33Z8X\"\n});\n\nconst db = firebase.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n\n\n  export { db, auth, storage };","import React, { useEffect, useState } from 'react'\nimport './Post.css';\nimport Avatar from '@material-ui/core/Avatar';\nimport { db } from './firebase';\nimport firebase from \"firebase\";\n\nexport default function Post({postId,user, username, caption, imageUrl}) {\n    const [comments, setComments] = useState([]);\n    const [comment, setComment] = useState([]);\n    useEffect(() => {\n        console.log(\"here\");\n       let unsubscribe;\n       if(postId){\n           unsubscribe = db\n           .collection(\"posts\")\n           .doc(postId)\n           .collection(\"comments\")\n           .orderBy(\"timestamp\",\"desc\")\n           .onSnapshot((snapshot) => {\n               setComments(snapshot.docs.map((doc) => doc.data()));\n           });\n       }\n       return () => {\n           unsubscribe();\n       }\n    }, [postId])\n    const postComment = (event) => {\n        event.preventDefault();\n        db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n            username: user.displayName,\n            text: comment,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n        });\n        setComment('');\n    }\n    return (\n        <div className=\"post\">\n            <div className=\"post__header\">\n                <Avatar \n                    className=\"post__avatar\" \n                    alt=\"Mario\"\n                    src=\"/static/images/avatar/1.jpg\"\n                />\n                <h3>{username}</h3>\n            </div>\n            { /* header -> avatar + username */ }\n        \n            <img className=\"post__image\" src={imageUrl} />\n            { /* image */ }\n            \n            <h4 className=\"post__text\"><strong>{username}:</strong> {caption}</h4>\n           \n            {\n                <div className=\"post__comments\">\n                    {comments.map(comment => (\n                        <p>\n                            <strong>{comment.username}</strong> {comment.text}\n                        </p>\n                    ))}\n                </div>\n            }\n             { user && (\n                 <form className=\"post__commentBox\">\n                 <input\n                 className=\"post__input\"\n                 type=\"text\"\n                 placeholder=\"Add a comment...\"\n                 value={comment}\n                 onChange={(e) => setComment(e.target.value)} />\n                 <button \n                 disabled={!comment}\n                 className=\"post__button\"\n                 type=\"submit\"\n                 onClick={postComment}>\n                     Post\n                 </button>\n             </form>\n             )}\n            \n        </div>\n    )\n}\n","import { Button } from '@material-ui/core'\nimport { auth } from 'firebase';\nimport React, { useState } from 'react'\nimport { db, storage } from './firebase';\nimport firebase from \"firebase\";\nimport './ImageUpload.css';\n\nfunction ImageUpload({username}) {\n    const [caption, setCaption] = useState('');\n    const [image,  setImage] = useState('');\n    const [progress, setProgress] = useState('');\n    const handleChange = (event) => {\n        const files = event.target.files;\n        console.log(files);\n        setImage(event.target.files[0]);\n        console.log(image);\n        if(event.target.files[0]){\n            setImage(event.target.files[0]);\n            console.log(image);\n        }\n    }\n    const handleUpload = (event) => {\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\n        uploadTask.on(\"state_changed\", (snapshot) => {\n            //progress function\n            const progess = Math.round(\n                (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n            );\n            setProgress(progess);\n        }, (error) => { \n            //error function\n            console.log(error);\n            alert(error.message);\n        }, () => {\n            // completed function\n            storage.ref(\"images\")\n            .child(image.name)\n            .getDownloadURL()\n            .then(url => {\n                db.collection(\"posts\").add({\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                    caption: caption,\n                    imageUrl: url, \n                    username: username\n                })\n\n                setProgress(0);\n                setCaption('');\n                setImage(null);\n            })\n        })\n    }\n    return (\n        <div className=\"imageUpload\">\n            <progress className=\"imageUpload__progress\" value={progress} max=\"100\" />\n            <input type=\"text\" onChange={event => setCaption(event.target.value)} placeholder=\"Enter a caption...\" value={caption} />\n            <input type=\"file\" onChange={handleChange}/>\n            <Button onClick={handleUpload}>\n                Upload\n            </Button>\n        </div>\n    )\n}\n\nexport default ImageUpload\n","import React, { useState , useEffect} from 'react';\nimport './App.css';\nimport Post from './Post';\nimport {db, auth} from './firebase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport { Button, Input } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport InstagramEmbed from 'react-instagram-embed';\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\n\nfunction App() {\n  const classes = useStyles();\n  const [posts, setPosts] = useState([\n  ]);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const [username, setUsername] = useState('');\n  const [user, setUser] = useState(null);\n  const [modalStyle] = React.useState(getModalStyle);\n  const signIn = (event) => {\n    event.preventDefault();\n    auth.signInWithEmailAndPassword(email, password).then((authUser) => {\n      console.log(authUser);\n    }).catch((error) => {\n      console.log(error);\n    })\n    setOpenSignIn(false);\n  }\n  const signUp = (event) => {\n    event.preventDefault();\n    auth.createUserWithEmailAndPassword(email, password)\n    .then((authUser) => {\n      return authUser.user.updateProfile({\n        displayName: username\n      })\n    })\n    .catch((error) => alert(error.message));\n    setOpen(false);\n  }\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if(authUser){\n        // user has logged in \n        console.log(authUser);\n        setUser(authUser);\n        \n        if(authUser.displayName){\n          // don't update the ususernameername\n        }\n        else {\n          return authUser.updateProfile({displayName: username});\n        }\n      }\n      else {\n        // user has logged out\n        setUser(null);\n      }\n    })\n    return () => {\n      unsubscribe();\n    }\n  }, [user, username])\n  useEffect(() => {\n    // this code runs everytime the posts changes\n    db.collection('posts').orderBy('timestamp','desc').onSnapshot(snaphot => {\n      // everytime a new post is added , this code will fire\n      setPosts(snaphot.docs.map(doc => \n        ({\n           id: doc.id,\n           post: doc.data()\n        })\n        ));\n    })\n  },[posts])\n  return (\n    <div className=\"app\">\n      <Modal\n        open={open}\n        onClose={ () => setOpen(false)}\n      >\n      <div style={modalStyle} className={classes.paper}>\n       <form className=\"app__signUp\">\n       <center>\n          <img \n            className=\"app__headerImage\"\n            src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n            alt=\"\"\n          />\n        </center>\n        <Input \n          placeholder=\"username\"\n          type=\"text\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}/>\n        <Input \n          placeholder=\"password\"\n          type=\"text\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}/>\n          <Input \n          placeholder=\"email\"\n          type=\"text\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}/>\n          <Button onClick={signUp}>Submit</Button>\n       </form>\n      </div>\n \n      </Modal>\n      <Modal\n       open={openSignIn}\n       onClose={ () => setOpenSignIn(false)}\n      >\n      <div style={modalStyle} className={classes.paper}>\n       <form className=\"app__signUp\">\n       <center>\n          <img \n            className=\"app__headerImage\"\n            src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n            alt=\"\"\n          />\n        </center>\n          <Input \n          placeholder=\"email\"\n          type=\"text\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}/>\n        <Input \n          placeholder=\"password\"\n          type=\"text\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}/>\n          <Button onClick={signIn}>Login</Button>\n       </form>\n      </div>\n      </Modal>\n      <div className=\"app__header\">\n        <img \n          className=\"app__headerImage\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n          alt=\"\"\n        />\n        { user ? (\n            <Button onClick={() => auth.signOut()}>Logout</Button>\n          ) : (\n            <div className=\"app__loginContainer\">\n               <Button onClick={() => setOpenSignIn(true)}>Sign in</Button>\n              <Button onClick={() => setOpen(true)}>Sign up</Button>\n            </div>\n          )}\n      </div>\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n            {\n            posts.map(({id, post}) => (\n              <Post key={id} postId={id} user={user} username={post.username} caption={post.caption} imageUrl={post.imageUrl} />\n            ))\n          }\n        </div>\n        <div className=\"app__postsRight\">\n            <InstagramEmbed\n            url='https://www.instagram.com/mariosobhy9/'\n            maxWidth={320}\n            hideCaption={false}\n            containerTagName='div'\n            protocol=''\n            injectScript\n            onLoading={() => {}}\n            onSuccess={() => {}}\n            onAfterRender={() => {}}\n            onFailure={() => {}}\n          />\n        </div>\n      </div>\n     \n      {\n        user?.displayName ? ( \n          <ImageUpload username={user.displayName} />\n        ) : (\n          <h3>Login to upload</h3>\n        )\n      }\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}